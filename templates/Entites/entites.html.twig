<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Entity Display</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
{% include 'includes/navbar.html.twig' %}

<main class="bg-gray-100 p-8">

    <div class="container mx-auto">
        <h1 class="text-2xl font-bold mb-4">Entités</h1>
        <div class="space-y-4">
            <!-- Ateliers -->
            <div class="flex items-center justify-between bg-white p-4 shadow-md rounded-md">
                <span class="text-lg font-semibold">Ateliers</span>
                <button class="text-blue-500 focus:outline-none" onclick="toggleEntities('ateliers')">+</button>
            </div>
            <div id="ateliers" class="hidden entity">

            </div>

            <!-- Intervenants -->
            <div class="flex items-center justify-between bg-white p-4 shadow-md rounded-md">
                <span class="text-lg font-semibold">Intervenants</span>
                <button class="text-blue-500 focus:outline-none" onclick="toggleEntities('intervenants')">+</button>
            </div>
            <div id="intervenants" class="hidden entity">
                <!-- Render your intervenants data here -->
            </div>

            <!-- Lycéens -->
            <div class="flex items-center justify-between bg-white p-4 shadow-md rounded-md">
                <span class="text-lg font-semibold">Lycéens</span>
                <button class="text-blue-500 focus:outline-none" onclick="toggleEntities('lyceens')">+</button>
            </div>
            <div id="lyceens" class="hidden entity">
                <!-- Render your lycéens data here -->
            </div>

            <!-- Sponsors -->
            <div class="flex items-center justify-between bg-white p-4 shadow-md rounded-md">
                <span class="text-lg font-semibold">Sponsors</span>
                <button class="text-blue-500 focus:outline-none" onclick="toggleEntities('sponsors')">+</button>
            </div>
            <div id="sponsors" class="hidden entity">
                <!-- Render your sponsors data here -->
            </div>

            <!-- Métiers -->
            <div class="flex items-center justify-between bg-white p-4 shadow-md rounded-md">
                <span class="text-lg font-semibold">Métiers</span>
                <button class="text-blue-500 focus:outline-none" onclick="toggleEntities('metiers')">+</button>
            </div>
            <div id="metiers" class="hidden entity">
                <!-- Render your metiers data here -->
            </div>
            <div class="flex items-center justify-between bg-white p-4 shadow-md rounded-md">
                <span class="text-lg font-semibold">Forums</span>
                <button class="text-blue-500 focus:outline-none" onclick="toggleEntities('forums')">+</button>
            </div>
            <div id="forums" class="hidden entity">
                <!-- Render your metiers data here -->
            </div>
        </div>
    </div>

    <script>

        const entityValues = {
            'forums': {
                1: 'id',
                2: 'annee'
            },
            'sponsors': {
                1: 'id',
                2: 'nom',
                3: 'logo',
                4: 'url redirection',
                5: 'forum id'
            }
        }

          //Disable all the id fields from being edited
        function disableIdInput(){
            var entityDOM = document.getElementsByClassName("entity")
            var entitesValues = []
            for(entity of entityDOM){
                if(!entity.classList.contains('hidden')){
                    var entityTbody =  entity.firstElementChild.children[1]
                    for(tr of entityTbody.children){
                        tr.firstElementChild.firstElementChild.disabled = true
                    }
                }
            }
        }

        function deleteEntity(entityId, entity) {
        // Fetch content dynamically
        fetch(`/${entity}/delete/${entityId}`, {
            method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            console.log(data.message);            
        })
        .catch(error => {
            console.error('Error:', error);
        });
        toggleEntities(entityId)
        }     

        function updateEntity(entityId, entity, elementId) {
        
        updatedData = []
        // Fetch content dynamically
        var tableDOM = document.getElementById(entity);
        var tableValues = tableDOM.firstElementChild.children[1].children[parseInt(elementId)]
        Array.from(tableValues.children).forEach(element => {
            if (element.firstElementChild && element.firstElementChild.tagName) {
                if (element.firstElementChild.tagName.toLowerCase() === 'input') {
                    updatedData.push(element.firstElementChild.value);
                } else {
                    updatedData.push(null);
                }
            } else {
                updatedData.push(null);
            }
        });
        updatedData.splice(0, 1); // Remove the first element (id)
        updatedData.splice(-2);   // Remove the last two elements (edit , delete)
        var jsonString = JSON.stringify(updatedData);

        console.log(jsonString)
        fetch(`/${entity}/update/${entityId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: jsonString,
        })
        .then(response => {
            if(response.status != 200){
                console.log(response.json())
                //window.alert(`HTTP error! Status: ${response.status}`);
            }
            else{
                console.log(response.json())
                //window.alert("Data updated successfully")
            }
        }
        )
        .then(data => {
            console.log(data)
        }
        )
        .catch(error => {
            window.alert(`HTTP error! Status: ${error}`);
        });
        }

        

        async function toggleEntities(entityId) {
        
        const entityDiv = document.getElementById(entityId);

        if (entityDiv.classList.contains('hidden')) {
            // Fetch content dynamically
            const response = await fetch(`/entites/${entityId}`);
            const data = await response.json();
            // Generate HTML table with Tailwind CSS classes
            const tableHTML = `
            <table class="min-w-full bg-white border border-gray-300">
                <thead>
                    <tr class="bg-gray-100 flex justify-around">
                        ${Object.values(entityValues[entityId]).map((columnName, index) => `
                            <th class="my-3 px-4">${columnName}</th>
                        `).join('')}
                        <th class="my-2 px-4">Edit</th>
                        <th class="my-2 px-4">Delete</th>
                    </tr>
                </thead>
                <tbody>
                    ${data[entityId].map((entity, counter) => `
                        <tr id=${counter} class="hover:bg-gray-50 flex justify-around">
                            ${Object.keys(entityValues[entityId]).map(index => `
                                <td id="${entity[entityValues[entityId][1]]}" class="my-5 px-4">
                                    <input  value='${entity[entityValues[entityId][index]]}'>
                                </td>
                            `).join('')}
                            <td class="button-60 my-3 px-4" onclick="updateEntity(${entity[entityValues[entityId][1]]}, '${entityId}', '${counter}')">Edit</td>
                            <td class="button-60 my-3 px-4" onclick="deleteEntity(${entity[entityValues[entityId][1]]}, '${entityId}')">Delete</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
            `;

            entityDiv.innerHTML = tableHTML;
        }
        entityDiv.classList.toggle('hidden');
        disableIdInput()

    }

  
    </script>
</main>
</body>
</html>

<style>
input{
    background-color: transparent;
}

input::placeholder{
    color: #000;
}
/* CSS */
.button-60 {
  align-items: center;
  appearance: none;
  background-color: #fff;
  border: 1px solid #dbdbdb;
  border-radius: .375em;
  box-shadow: none;
  box-sizing: border-box;
  color: #363636;
  cursor: pointer;
  display: inline-flex;
  font-family: BlinkMacSystemFont,-apple-system,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",Helvetica,Arial,sans-serif;
  font-size: 1rem;
  height: 2.5em;
  justify-content: center;
  position: relative;
  text-align: center;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  white-space: nowrap;
}

.button-60:active {
  border-color: #4a4a4a;
  outline: 0;
}

.button-60:focus {
  border-color: #485fc7;
  outline: 0;
}

.button-60:hover {
  border-color: #b5b5b5;
}

.button-60:focus:not(:active) {
  box-shadow: rgba(72, 95, 199, .25) 0 0 0 .125em;
}

</style>
